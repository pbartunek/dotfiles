# set syntax=bash

_init-files() {
  local project_dir=$1

  if [[ ! -f ${project_dir}/notes.md ]]; then
    echo "# ${project}\n\n## access\n\n\n## notes\n\n\n## findings\n\n\n## TODO\n\n" > notes.md
  fi
}

_init-files-audit() {
  local project_dir=$1

  if [[ ! -f ${project_dir}/notes.md ]]; then
cat << EOF > notes.md
${project}
-------------------------------------------------------------------------------

Scope
-------------------------------------------------------------------------------


TODO
-------------------------------------------------------------------------------


Notes
-------------------------------------------------------------------------------


Docs
-------------------------------------------------------------------------------


Summary
-------------------------------------------------------------------------------


Findings
-------------------------------------------------------------------------------



EOF

  fi
}

_init-dirs() {
  local project_dir=$1

  if [[ ! -d ${project_dir} ]]; then
    mkdir -p ${project_dir}/scans ${project_dir}/findings
  fi
}

_init-dirs-audit() {
  local project_dir=$1

  if [[ ! -d ${project_dir} ]]; then
    mkdir -p ${project_dir}/scans ${project_dir}/findings ${project_dir}/src
  fi
}


# create project structure for new audit
audit() {
  local project=${1%/}
  local project_dir="${HOME}/work/${project}"

  if [[ "$project" == "" ]]; then
    echo "You need to specify project name!"
    echo "Usage: $0 project_name"
    return
  elif [[ ! "$project" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid project name, only [a-zA-Z0-9_.-] characters are allowed!"
    return
  fi 

  # create initial directories and files
  _init-dirs-audit $project_dir
  cd $project_dir
  _init-files-audit $project_dir

  set-window-title "Audit: ${project}"
  code ${project_dir}/src
  screen -S ${project} -t vim vim notes.md
}
# autocompletion for audit
compdef '_files -/ -W ~/work' audit

# create project structure, start burp and web browser
webtest() {
  local project=${1%/}
  local project_dir="${HOME}/work/${project}"

  if [[ "$project" == "" ]]; then
    echo "You need to specify project name!"
    echo "Usage: $0 project_name"
    return
  elif [[ ! "$project" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid project name, only [a-zA-Z0-9_.-] characters are allowed!"
    return
  fi 

  # create initial directories and files
  _init-dirs $project_dir
  cd $project_dir
  _init-files $project_dir

  #firefox-esr 2> /dev/null &
  if [[ -f ${project_dir}/project.burp || ! -f ${HOME}/files/tools/config-files/burp_project.json ]]; then
    echo "burp project exists"
    BurpSuitePro \
      --project-file=${project_dir}/project.burp 2> /dev/null &
  else
    echo "burp project doesn't exist"
    BurpSuitePro \
      --config-file=${HOME}/files/tools/config-files/burp_project.json \
      --project-file=${project_dir}/project.burp 2> /dev/null &
  fi

  screen -S ${project} -t vim vim notes.md
}
# autocompletion for webtest
compdef '_files -/ -W ~/work' webtest

# open project directory
work() {
  local dir=$1

  if [ -z "$dir" ]; then
    cd "${HOME}/work"
  else
    local project=${1%/}
    local project_dir="${HOME}/work/${project}"

    # create initial directories and files
    _init-dirs $project_dir
    cd $project_dir
    _init-files "$project_dir"

    screen -S ${project} -t vim vim notes.md
  fi
}
compdef '_files -/ -W ~/work' work

# print screen
# requirements: maim, slop, zenity
prtscr() {
  filename="$(date +%F-%H.%M.%S).png"
  temp_file=$(mktemp --suffix=.png)
  last_dir=/tmp/prtscr.last.tmp
  save_as=""

  if [ -f $last_dir ]; then
    filename="$(cat $last_dir)/$filename"
  fi
  maim -s $temp_file 2> /dev/null

  if [ -s $temp_file ]; then
    save_as=`zenity --file-selection --save --filename $filename --title "Save as" 2> /dev/null`
    if [[ ! -z "$save_as" ]]; then
      cp $temp_file "$save_as"
      dirname $save_as > $last_dir
    fi

    rm $temp_file
  fi
}

# run webserver from current directory
serv() {
  local port=${1:-8090}

  if [[ $port =~ ^[0-9]+$ ]]; then
    ruby -run -e httpd . -p $port
  else
    echo "Usage: $0 [port number]"
  fi
}

serv-auth() {
  local pass=$(pwgen -1 -n 20)
  local port=${1:-8090}

  echo "\nStarting a web server with basic authentication: test / ${pass}\n"

  if [[ $port =~ ^[0-9]+$ ]]; then
    npx http-server . -p $port --username test --password $pass
  else
    echo "Usage: $0 [port number]"
  fi
}

# convert IP address to decimal
ip2dec() {
  IFS=.
  read -r a b c d <<< "$1"
  echo $(( (a*256**3) + (b*256**2) + (c*256) + (d) ))
}

# formal XML
format-xml() {
  if [ -z "$1" ]; then
    echo "Usage: $0 file.xml"
    return
  fi

  cat $1 | python -c 'import sys;import xml.dom.minidom;s=sys.stdin.read();print xml.dom.minidom.parseString(s).toprettyxml()'
}

# format text file with ip addresses and network masks,
# generate list of IP addresses from IP ranges
format-scope() {
  if [ -z "$1" ]; then
    echo "Usage: $0 file"
    return
  fi
  local filename=$1

  sed -i -E 's@/([0-9]{2})@/\1\n@g' $filename;
  sed -i -e '/^$/d' $filename;

  nmap -sL -iL $filename -Pn -n | grep "Nmap scan report" | cut -d" " -f5 > "${filename}.tmp"
  rm $filename
  mv "${filename}.tmp" $filename
}

# notes
function notes() {
  if [[ -d ${HOME}/files/notes ]]; then
    cd ${HOME}/files/notes;
    set-window-title notes

    screen -S notes -t server -d -m ./web.sh
    sleep 1
    screen -X screen -t vim vim files
    screen -rd notes

  else
    echo "notes directory not found"
  fi
}

# copy to clipboard
function to-clipboard() {
  local file=$1
  local os=$(uname -s)

  if [[ -f $file ]]; then
    if [[ $os = "Darwin" ]]; then
      cat $file | pbcopy
    else
      xclip -sel cli $file
    fi
  else
    echo "File ${file} does not exist."
  fi
}

function set-window-title {
  title=$*
  echo -ne "\033]0;$title\007"
}

# generate password and copy it to clipboard
function pw {
  local os=$(uname -s)
  if [[ $os = "Darwin" ]]; then
    pwgen -1 32 | pbcopy
  else
    pwgen -1 32 | xclip -sel cli
  fi
}

function mkcd {
  mkdir -p $1 && cd $1
}

# Read URL(s) from STDIN and sends HEAD request with curl, returns URL and status code
function test-url() {
  while read -r url; do
    echo -en "$url\t";
    curl -s --max-time 2 -k -I $url | head -n 1 | cut -d" " -f2-
  done
}

function getJs() {
  while read -r url; do
    echo "Downloading JS files from ${url}"
    for f in `getJS --url $url --complete `; do curl --create-dirs --silent -O $f; done
  done
}

function h() {
  history | grep --color $1
}

function sort-ip() {
  sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4
}

function external-ip() {
  timestamp=$(date +'%Y-%m-%d %T')
  filename="external-ip.txt"
  ip=$(curl -s  http://showip.net)
  echo $ip
  echo "${timestamp} |\u001b[32m ${ip} \u001b[0m" >> $filename
}
