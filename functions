# set syntax=bash

_init-files() {
  local project_dir=$1

  if [[ ! -f ${project_dir}/notes.md ]]; then
    echo "# ${project}\n\n## access\n\n\n## notes\n\n\n## findings\n\n\n## TODO\n\n" > notes.md
  fi
}

webtest() {
  local project=${1%/}
  local project_dir="${HOME}/work/${project}"

  if [[ "$project" == "" ]]; then
    echo "You need to specify project name!"
    echo "Usage: $0 project_name"
    return
  elif [[ ! "$project" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid project name, only [a-zA-Z0-9_.-] characters are allowed!"
    return
  fi 

  if [[ ! -d ${project_dir} ]]; then
    mkdir -p ${project_dir}/scans
    mkdir -p ${project_dir}/findings
  fi

  cd $project_dir

  # create initial files
  _init-files $project_dir

  firefox-esr 2> /dev/null &
  if [[ -f ${project_dir}/project.burp || ! -f ${HOME}/files/tools/config-files/burp_project.json ]]; then
    echo "burp project exists"
    BurpSuitePro \
      --project-file=${project_dir}/project.burp 2> /dev/null &
  else
    echo "burp project doesn't exist"
    BurpSuitePro \
      --config-file=${HOME}/files/tools/config-files/burp_project.json \
      --project-file=${project_dir}/project.burp 2> /dev/null &
  fi

  screen -S ${project} -t vim vim notes.md
}
# autocompletion for webtest
compdef '_files -/ -W ~/work' webtest

# print screen
# requirements: maim, slop, zenity
prtscr() {
  filename="$(date +%F-%H.%M.%S).png"
  temp_file=$(mktemp --suffix=.png)
  last_dir=/tmp/prtscr.last.tmp
  save_as=""

  if [ -f $last_dir ]; then
    filename="$(cat $last_dir)/$filename"
  fi
  maim -s $temp_file 2> /dev/null

  if [ -s $temp_file ]; then
    save_as=`zenity --file-selection --save --filename $filename --title "Save as" 2> /dev/null`
    if [[ ! -z "$save_as" ]]; then
      cp $temp_file "$save_as"
      dirname $save_as > $last_dir
    fi

    rm $temp_file
  fi
}

# run webserver from current directory
serv() {
  local port=${1:-8090}

  if [[ $port =~ ^[0-9]+$ ]]; then
    ruby -run -e httpd . -p $port
  else
    echo "Usage: $0 [port number]"
  fi
}

# convert IP address to decimal
ip2dec() {
  IFS=.
  read -r a b c d <<< "$1"
  echo $(( (a*256**3) + (b*256**2) + (c*256) + (d) ))
}

# get subdomains
function get-subdomains() {
  if [ -z "$1" ]; then
    echo "Usage: $0 target.domain"
    return
  fi
  target=$1
  temp=mktemp

  echo "Getting subdomains for $target"
  echo -n "sources: "

  echo -n "Hackertarget, "
  curl "http://api.hackertarget.com/hostsearch/?q=$target" -m 30 2>/dev/null | sed 's/,/ /' | awk '{print $1}' | grep "$target" >> $temp

  echo -n "Virustotal, "
  curl https://www.virustotal.com/en/domain/$target/information/ -H 'Host: www.virustotal.com' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' --compressed -m 30 2> /dev/null| grep information | grep "$target" | awk '{print $3}' | sed 's/\// /g' | awk '{print $4}'  >> $temp

  echo ""
  echo "Found $(cat $temp | sort -u | wc -l) $target subdomains:"
  cat $temp | sort -u
  rm $temp
}

# formal XML
format-xml() {
  if [ -z "$1" ]; then
    echo "Usage: $0 file.xml"
    return
  fi

  cat $1 | python -c 'import sys;import xml.dom.minidom;s=sys.stdin.read();print xml.dom.minidom.parseString(s).toprettyxml()'
}

# format text file with ip addresses and network masks
format-scope() {
  if [ -z "$1" ]; then
    echo "Usage: $0 file"
    return
  fi

  sed -i -E 's@/([0-9]{2})@/\1\n@g' $1;
  sed -i -e '/^$/d' $1;
}

#
work() {
  local dir=$1

  if [ -z "$dir" ]; then
    cd "${HOME}/work"
  else
    local project=${1%/}
    local project_dir="${HOME}/work/${project}"

    if [[ ! -d ${project_dir} ]]; then
      mkdir -p ${project_dir}/scans
    fi
    cd $project_dir

    # create initial files
    _init-files "$project_dir"

    screen -S ${project} -t vim vim notes.md
  fi
}
compdef '_files -/ -W ~/work' work

# notes
function notes() {
  if [[ -d ${HOME}/files/notes ]]; then
    cd ${HOME}/files/notes;

    tmux new-session -s notes -d './web.sh'
    tmux new-window -t notes 'vim files'
    tmux attach-session -t notes

  else
    echo "notes directory not found"
  fi
}

# copy to clipboard
function to-clipboard() {
  local file=$1

  if [[ -f $file ]]; then
    xclip -sel cli $file
  else
    echo "File ${file} does not exist."
  fi
}

# gobuster
gbstr() {
  gobuster dir -e -k -l -s 200,204,307,500,501,502 --wildcard "$@" | tee -a gobuster.log
}

# autocompletion for gobuster
compdef '_gbstr' gbstr
_gbstr() {
    integer ret=1
    local -a args
    args+=(
        '-u[URL]:url:(http\:// https\://)'
        '-w[wordlist]:file:_files -W ~/files/tools/wordlists'
        '-p[Proxy]:string'
        '-h[help]'
    )
    _arguments $args[@] && ret=0
    return ret
}

function set-window-title {
  title=$*
  echo -ne "\033]0;$title\007"
}
