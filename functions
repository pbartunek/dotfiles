# set syntax=bash

# print screen
# requirements: maim, slop, zenity
prtscr() {
  filename="$(date +%F-%H.%M.%S).png"
  temp_file=$(mktemp --suffix=.png)
  last_dir=/tmp/prtscr.last.tmp
  save_as=""

  if [ -f $last_dir ]; then
    filename="$(cat $last_dir)/$filename"
  fi
  maim -s $temp_file 2> /dev/null

  if [ -s $temp_file ]; then
    save_as=`zenity --file-selection --save --filename $filename --title "Save as" 2> /dev/null`
    if [[ ! -z "$save_as" ]]; then
      cp $temp_file "$save_as"
      dirname $save_as > $last_dir
    fi

    rm $temp_file
  fi
}

# update git repos
repos-update() {
  update() {
        echo "pulling $1"
        cd $1
        git pull
        cd ..
  }
  repos-action update
}

# get status of git repos
repos-status() {
  status() {
        echo "Status of: $1"
        cd $1
        git status -s
        cd ..
  }
  repos-action status
}

repos-action() {
  local repos=(dockerfiles dotfiles notes tools)
  local currentDir=$(pwd)

  cd ~/files
  for repo in $repos
    do
      if [ -d $repo ]; then
        $1 $repo
      fi
  done
  cd $currentDir
}

# run webserver from current directory
serv() {
  local port=${1:-8090}

  if [[ $port =~ ^[0-9]+$ ]]; then
    ruby -run -e httpd . -p $port
  else
    echo "Usage: $0 [port number]"
  fi
}

# convert IP address to decimal
ip2dec() {
  IFS=.
  read -r a b c d <<< "$1"
  echo $(( (a*256**3) + (b*256**2) + (c*256) + (d) ))
}

# get subdomains
function get-subdomains() {
  if [ -z "$1" ]; then
    echo "Usage: $0 target.domain"
    return
  fi
  target=$1
  temp=mktemp

  echo "Getting subdomains for $target"
  echo -n "sources: "

  echo -n "Hackertarget, "
  curl "http://api.hackertarget.com/hostsearch/?q=$target" -m 30 2>/dev/null | sed 's/,/ /' | awk '{print $1}' | grep "$target" >> $temp

  echo -n "Virustotal, "
  curl https://www.virustotal.com/en/domain/$target/information/ -H 'Host: www.virustotal.com' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' --compressed -m 30 2> /dev/null| grep information | grep "$target" | awk '{print $3}' | sed 's/\// /g' | awk '{print $4}'  >> $temp

  echo ""
  echo "Found $(cat $temp | sort -u | wc -l) $target subdomains:"
  cat $temp | sort -u
  rm $temp
}

# formal XML
format-xml() {
  if [ -z "$1" ]; then
    echo "Usage: $0 file.xml"
    return
  fi

  cat $1 | python -c 'import sys;import xml.dom.minidom;s=sys.stdin.read();print xml.dom.minidom.parseString(s).toprettyxml()'
}

#
work() {
  local dir=$1

  if [ -z "$dir" ]; then
    cd "${HOME}/work"
  else
    cd "${HOME}/work/${dir}"
  fi
}
compdef '_files -/ -W ~/work' work
