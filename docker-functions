# set syntax=bash

# Helper functions

delete_stopped() {
  local container=$1
  local state="false"

  state=$(docker inspect -f "{{.State.Running}}" "$container" 2> /dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $container
  fi
}

# Docker wrappers

webtest() {
  local project=${1%/}
  local project_dir="${HOME}/work/${project}"
  local burp_ip

  if [[ "$project" == "" ]]; then
    echo "You need to specify project name!"
    echo "Usage: $0 project_name"
    return
  elif [[ ! "$project" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid project name, only [a-zA-Z0-9_.-] characters are allowed!"
    return
  fi 

  # create firefox directory
  if [ ! -d $project_dir/.mozilla ]; then
    echo "creating project directory"
    mkdir -p $project_dir/.mozilla
    mkdir -p $project_dir/Downloads
    echo "copying firefox profile"
    cp -r ~/files/FirefoxSettings/* $project_dir/.mozilla/
  fi

  # copy BurpSuite preferences on first run
  if [ ! -d $project_dir/.BurpSuite ]; then
    cp -r ~/files/BurpSettings/BurpSuite $project_dir/.BurpSuite
    cp -r ~/files/BurpSettings/java $project_dir/.java 
  fi

  cd $project_dir

  delete_stopped "webtest-firefox-${project}"

  docker run -d \
    --cpuset-cpus 0 \
    --memory 3gb \
    --net host \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v /dev/shm:/dev/shm \
    -v /etc/hosts:/etc/hosts:ro \
    -v ${HOME}/files/tools:/data/tools \
    -v $project_dir:/data/project \
    -v $project_dir/.BurpSuite:/home/webtest/.BurpSuite \
    -v $project_dir/.java:/home/webtest/.java \
    -v $project_dir/Downloads:/home/webtest/Downloads \
    -v $project_dir/.mozilla:/home/webtest/.mozilla \
    --device /dev/snd \
    --device /dev/dri \
    --device /dev/bus/usb \
    -e DISPLAY=$DISPLAY \
    --name "webtest-firefox-${project}" \
    -h "webtest-firefox-${project}" \
    webtest-firefox
}
# autocompletion for webtest-firefox
compdef '_files -/ -W ~/work' webtest-firefox


webtest-chrome() {
  local project=${1%/}
  local project_dir="${HOME}/work/${project}"
  local burp_ip

  if [[ "$project" == "" ]]; then
    echo "You need to specify project name!"
    echo "Usage: $0 project_name"
    return
  elif [[ ! "$project" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid project name, only [a-zA-Z0-9_.-] characters are allowed!"
    return
  fi 

  # create chromium directories
  if [ ! -d $project_dir/.config/chromium ]; then
    mkdir -p $project_dir/.config/chromium
    mkdir -p $project_dir/Downloads
  fi

  # copy BurpSuite preferences on first run
  if [ ! -d $project_dir/.BurpSuite ]; then
    cp -r ~/files/BurpSettings/BurpSuite $project_dir/.BurpSuite
    cp -r ~/files/BurpSettings/java $project_dir/.java 
  fi

  cd $project_dir

  delete_stopped "webtest-${project}"

  docker run -d \
    --cpuset-cpus 0 \
    --memory 3gb \
    --net host \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v /dev/shm:/dev/shm \
    -v /etc/hosts:/etc/hosts:ro \
    -v ${HOME}/files/tools:/data/tools \
    -v $project_dir:/data/project \
    -v $project_dir/.BurpSuite:/home/webtest/.BurpSuite \
    -v $project_dir/.java:/home/webtest/.java \
    -v $project_dir/Downloads:/home/webtest/Downloads \
    -v $project_dir/.config/chromium:/home/webtest/.config/chromium \
    --security-opt seccomp:$HOME/containers/chrome/chrome.json \
    --device /dev/snd \
    --device /dev/dri \
    --device /dev/bus/usb \
    -e DISPLAY=$DISPLAY \
    --name "webtest-${project}" \
    -h "webtest-${project}" \
    webtest
}
# autocompletion for webtest
compdef '_files -/ -W ~/work' webtest

burp() {
  # copy BurpSuite preferences on first run
  if [ ! -d $HOME/containers/burp/.BurpSuite ]; then
    mkdir -p $HOME/containers/burp
    cp -r ~/files/BurpSettings/BurpSuite $project_dir/.BurpSuite
    cp -r ~/files/BurpSettings/java $project_dir/.java 
  fi

  delete_stopped burppro

  docker run -d \
    --cpuset-cpus 0 \
    --memory 2gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME/containers/burp/:/data/project \
    -e DISPLAY=unix$DISPLAY \
    --name burppro \
    -h burppro \
    burppro

  # get burp container IP address
  echo "Container IP address: " $(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' 'burppro')
}

burpfree() {
  delete_stopped burp

  docker run -d \
    --cpuset-cpus 0 \
    --memory 2gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=unix$DISPLAY \
    --name burp \
    -h burp \
    burp

  # get burp container IP address
  echo "Container IP address: " $(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' 'burp')
}

chrome() {
  delete_stopped chrome

  docker run -d \
    --cpuset-cpus 0 \
    --memory 1gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=unix$DISPLAY \
    -v $HOME/Downloads:/home/chrome/Downloads \
    -v $HOME/containers/chrome/.config:/home/chrome/.config \
    --security-opt seccomp=$HOME/containers/chrome/chrome.json \
    --device /dev/snd \
    --device /dev/dri \
    -v /dev/shm:/dev/shm \
    --name chrome \
    -h chrome \
    chrome
}

firefox() {
  delete_stopped firefox

  mkdir -p "${HOME}/containers/firefox/.cache"
  mkdir -p "${HOME}/containers/firefox/.mozilla"
  mkdir -p "${HOME}/Downloads"
  docker run -d \
    --user browser:browser \
    --memory 1gb \
    --net host \
    --cpuset-cpus 0 \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v "${HOME}/containers/firefox/.cache:/home/browser/.cache" \
    -v "${HOME}/containers/firefox/.mozilla:/home/browser/.mozilla" \
    -v "${HOME}/Downloads:/home/browser/Downloads" \
    -e "DISPLAY=unix${DISPLAY}" \
    -e GDK_SCALE \
    -e GDK_DPI_SCALE \
    --device /dev/snd \
    --device /dev/dri \
    --name firefox \
    -h firefox \
    firefox "$@"
}

# kali linux
kali() {
  local project=$1
  local project_dir="${HOME}/work/${project}"
  local name="kali"
  local mount_point=""

  if [[ "$project" == "" ]]; then
    mount_point="${HOME}/work"
  else
    mount_point="${HOME}/work/${project}"
    name="kali-${project}"
  fi 

  mkdir -p "${mount_point}/msf_loot"

  delete_stopped $name

  docker run -ti \
    --net host \
    --name $name \
    -v "${mount_point}":/data \
    -v "${mount_point}/msf_loot":/root/.msf4/loot \
    -v ${HOME}/files/tools:/tools \
    -h kali \
    kali
}
# autocompletion for kali
compdef '_files -/ -W ~/work' kali

# gobuster
gobuster() {
  docker run --rm \
    -v "${HOME}/files/tools/wordlists/:/wordlists" \
    --net host \
    gobuster -e -k -l -s 200,204,301,302,307,500,501 -fw "$@" | tee -a gobuster.log
}
# autocompletion for gobuster
compdef '_gobuster' gobuster
_gobuster() {
    integer ret=1
    local -a args
    args+=(
        '-u[URL]:url:(http\:// https\://)'
        '-w[wordlist]:file:_files -/ -W ~/files/tools/wordlists'
        '-p[Proxy]:string'
        '-h[help]'
    )
    _arguments $args[@] && ret=0
    return ret
}

# website screenshots
scraper() {
  delete_stopped scraper
  
  args=$*
  if [[ $1 == "-p" ]]; then
    proxy='http://127.0.0.1:8080'
    args=${*:2}
  fi

  docker run -d \
    --net host \
    -v ${PWD}:/data/workdir \
    -e "PROXY=$proxy" \
    scraper "$args"
}
#
# headless chromium scraper
scraper-chromium() {
  docker run -d \
    -v ${PWD}:/workdir \
    --net host \
    --security-opt seccomp:$HOME/containers/chrome/chrome.json \
    scraper-chromium "$@"
}

# amap
amap() {
  docker run --rm \
  --net host \
  amap "$@" | tee -a amap.log
}

# run amap, use nmap scan results as input
amap-nmap() {
  docker run --rm \
  -v ${PWD}:/data \
  --net host \
  amap -A -b -d -i "/data/$1" | tee -a amap.log
}
compdef '_files -g "*.gnmap"' amap-nmap

# headless chromium
chromium-headless() {
  docker run -d \
    -v ${PWD}:/workdir \
    --net host \
    --security-opt seccomp:$HOME/containers/chrome/chrome.json \
    chromium-headless "$@"
}

# eyewitness
eyewitness() {
  docker run \
    --rm \
    --net host \
    -it \
    -v ${PWD}:/tmp/EyeWitness \
    eyewitness \
    "$@"
}

# nikto
nikto() {
  docker run \
    --rm \
    --net host \
    -it \
    nikto "$@"
}
