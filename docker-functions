# set syntax=bash

webtest() {
  local project=$1
  local project_dir="${HOME}/work/${project}"
  local burp_ip

  if [[ "$project" == "" ]]; then
    echo "You need to specify project name!";
    echo "Usage: webpt project_name";
    return
  fi 

  mkdir -p $project_dir/.config/chromium

  # copy BurpSuite preferences on first run
  if [ ! -d $project_dir/.BurpSuite ]; then
    cp -r ~/files/BurpSettings/BurpSuite $project_dir/.BurpSuite
    cp -r ~/files/BurpSettings/java $project_dir/.java 
    cp -r ~/files/BurpSettings/project.json $project_dir/
  fi

  delete_stopped "webtest-${project}"

  docker run -ti \
    --cpuset-cpus 0 \
    --memory 3gb \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v /dev/shm:/dev/shm \
    -v /etc/hosts:/etc/hosts \
    -v $project_dir:/data/project \
    -v $project_dir/.BurpSuite:/root/.BurpSuite \
    -v $project_dir/.java:/root/.java \
    -v $project_dir/.config/chromium:/root/.config/chromium \
    --device /dev/snd \
    --device /dev/dri \
    --device /dev/bus/usb \
    -e DISPLAY=$DISPLAY \
    --name "webtest-${project}" \
    -h "webtest-${project}" \
    webtest
}

burp() {
  # copy BurpSuite preferences on first run
  if [ ! -d $HOME/containers/burp/.BurpSuite ]; then
    mkdir -p $HOME/containers/burp
    cp -r ~/files/BurpSettings/BurpSuite $project_dir/.BurpSuite
    cp -r ~/files/BurpSettings/java $project_dir/.java 
  fi

  delete_stopped burppro

  docker run -d \
    --cpuset-cpus 0 \
    --memory 2gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME/containers/burp/:/data/project \
    -e DISPLAY=unix$DISPLAY \
    --name burppro \
    -h burppro \
    burppro

  # get burp container IP address
  echo "Container IP address: " $(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' 'burppro')
}

burpfree() {
  delete_stopped burp

  docker run -d \
    --cpuset-cpus 0 \
    --memory 2gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=unix$DISPLAY \
    --name burp \
    -h burp \
    burp

  # get burp container IP address
  echo "Container IP address: " $(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' 'burp')
}

chrome() {
  delete_stopped chrome

  docker run -d \
    --cpuset-cpus 0 \
    --memory 1gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=unix$DISPLAY \
    -v $HOME/Downloads:/home/chrome/Downloads \
    -v $HOME/containers/chrome/.config:/home/chrome/.config \
    --security-opt seccomp=$HOME/containers/chrome/chrome.json \
    --device /dev/snd \
    --device /dev/dri \
    -v /dev/shm:/dev/shm \
    --name chrome \
    -h chrome \
    chrome
}

firefox() {
  delete_stopped firefox

  mkdir -p "${HOME}/containers/firefox/.cache"
  mkdir -p "${HOME}/containers/firefox/.mozilla"
  mkdir -p "${HOME}/Downloads"
  docker run -d \
    --user browser:browser \
    --memory 1gb \
    --net host \
    --cpuset-cpus 0 \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v "${HOME}/containers/firefox/.cache:/home/browser/.cache" \
    -v "${HOME}/containers/firefox/.mozilla:/home/browser/.mozilla" \
    -v "${HOME}/Downloads:/home/browser/Downloads" \
    -e "DISPLAY=unix${DISPLAY}" \
    -e GDK_SCALE \
    -e GDK_DPI_SCALE \
    --device /dev/snd \
    --device /dev/dri \
    --name firefox \
    -h firefox \
    firefox "$@"
}

kali() {
  local project=$1
  local project_dir="${HOME}/work/${project}"

  if [[ "$project" == "" ]]; then
    mount_point="${HOME}/work:/data"
  else
    mount_point="${HOME}/work/${project}:/data"
  fi 

  delete_stopped kali

  docker run -ti \
    --net host \
    --name kali \
    -v "${mount_point}" \
    -h kali \
    kali
}

# Helper functions

delete_stopped() {
  local container=$1
  local state="false"

  state=$(docker inspect -f "{{.State.Running}}" "$container" 2> /dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $container
  fi
}
