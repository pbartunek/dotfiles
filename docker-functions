# set syntax=bash

# Helper functions

delete_stopped() {
  local container=$1
  local state="false"

  state=$(docker inspect -f "{{.State.Running}}" "$container" 2> /dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $container
  fi
}

function dshellpwd() {
  dirname=${PWD##*/}
  docker run --rm -ti --entrypoint=/bin/bash -v "${PWD}:/${dirname}" -w "/$dirname" "$@"
}

function dshpwd() {
  dirname=${PWD##*/}
  docker run --rm -ti --entrypoint=/bin/sh -v "${PWD}:/${dirname}" -w "/$dirname" "$@"
}

# Docker wrappers

burpfree() {
  delete_stopped burp

  docker run -d \
    --cpuset-cpus 0 \
    --memory 2gb \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=unix$DISPLAY \
    --name burp \
    -h burp \
    burp

  # get burp container IP address
  echo "Container IP address: " $(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' 'burp')
}

# kali linux
kali() {
  local project=$1
  local project_dir="${HOME}/work/${project}"
  local name="kali"
  local mount_point=""

  if [[ "$project" == "" ]]; then
    mount_point="${HOME}/work"
  else
    mount_point="${HOME}/work/${project}"
    name="kali-${project}"
  fi 

  mkdir -p "${mount_point}/msf_loot"

  delete_stopped $name

  docker run -ti \
    --net host \
    --name $name \
    -v "${mount_point}":/data \
    -v "${mount_point}/msf_loot":/root/.msf4/loot \
    -v ${HOME}/files/tools:/tools \
    -h kali \
    kali
}
# autocompletion for kali
compdef '_files -/ -W ~/work' kali

# website screenshots
scraper() {
  delete_stopped scraper
  
  args=$*
  if [[ $1 == "-p" ]]; then
    proxy='http://127.0.0.1:8080'
    args=${*:2}
  fi

  docker run -d \
    --net host \
    -v ${PWD}:/data/workdir \
    -e "PROXY=$proxy" \
    scraper "$args"
}
#
# headless chromium scraper
scraper-chromium() {
  docker run -d \
    -v ${PWD}:/workdir \
    --net host \
    --security-opt seccomp:$HOME/containers/chrome/chrome.json \
    scraper-chromium "$@"
}

# amap
amap() {
  docker run --rm \
  --net host \
  amap "$@" | tee -a amap.log
}

# run amap, use nmap scan results as input
amap-nmap() {
  docker run --rm \
  -v ${PWD}:/data \
  --net host \
  amap -A -b -d -i "/data/$1" | tee -a amap.log
}
compdef '_files -g "*.gnmap"' amap-nmap

# eyewitness
eyewitness() {
  docker run \
    --rm \
    --net host \
    -it \
    -v ${PWD}:/tmp/EyeWitness \
    eyewitness \
    "$@"
}

# nikto
nikto-docker() {
  docker run \
    --rm \
    --net host \
    -it \
    nikto "$@"
}

# empire
empire() {
  docker run \
    --rm \
    -ti \
    --net host \
    -v ${PWD}:/data \
    -w /opt/Empire \
    empireproject/empire /opt/Empire/empire
}

# nginx server

serv-nginx() {
  docker run -ti --rm --net host -v "${PWD}:/srv/data" nginx:latest
}

# webdav

serv-webdav() {
  docker run --rm -ti -p 80:80 -v "${PWD}:/srv/data/share" webdav
}

