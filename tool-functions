# 

RED="\033[1;31m"
GREEN="\033[1;32m"
BLUE="\033[1;36m"
YELLOW="\033[1;33m"
RESET="\033[0m"

# gobuster
function gbstr() {
  gobuster dir -e -k -l -s 200,204,307,500,501,502 --wildcard "$@" | tee -a gobuster.log
}

compdef '_gbstr' gbstr
_gbstr() {
    integer ret=1
    local -a args
    args+=(
        '-u[URL]:url:(http\:// https\://)'
        '-w[wordlist]:file:_files -W ~/files/tools/wordlists'
        '-p[Proxy]:string'
        '-h[help]'
    )
    _arguments $args[@] && ret=0
    return ret
}

# ffuf
function ffuf() {
  command ffuf -v -c -ac -fc 301,302 "$@" | tee -a ffuf.out
}

# meg
function meg() {
  command meg -d 3000 -s 200 -s 401 -s 500 -v "$@" | tee -a meg.log
}

# gf
compdef _gf gf
function _gf {
    _arguments "1: :($(gf -list))"
}

# httpx
# discover common web ports, grab page title, status, content type, web server,
# ip log to file
function httpx-web {
  httpx -follow-host-redirects \
    -status-code \
    -title \
    -content-type \
    -web-server \
    -ip \
    -silent \
    -ports 80,443,3000,5000,5672,7001,7002,7443,8000,8080,8081,8181,8282,8443,8880,8089,8888,9000,9090,9091,9200,9443,9999,10000 | tee -a httpx.log
}

# httprobe - default web ports
function httprobe() {
  command httprobe \
    -p http:3000 \
    -p http:7001 \
    -p https:7001 \
    -p http:7002 \
    -p https:7002 \
    -p https:7443 \
    -p http:8000 \
    -p http:8080 \
    -p http:8081 \
    -p http:8089 \
    -p http:8181 \
    -p http:8282 \
    -p https:8443 \
    -p http:8888 \
    -p http:9000 \
    -p http:9090 \
    -p http:9091 \
    -p http:9200 \
    -p https:9443 | tee -a httprobe.log
}

# nuclei default templates
function nuclei-internal() {
  command nuclei \
    -pbar \
    -t ~/nuclei-templates/cves \
    -t ~/nuclei-templates/files \
    -t ~/nuclei-templates/default-credentials \
    -t ~/nuclei-templates/generic-detections \
    -t ~/nuclei-templates/panels \
    -t ~/nuclei-templates/security-misconfiguration \
    -t ~/nuclei-templates/technologies \
    -t ~/nuclei-templates/vulnerabilities \
    -t ~/nuclei-templates/fuzzing \
    -o nuclei.log
}

# nuclei autocompletion
compdef '_files -/ -W ~/nuclei-templates/' nuclei

#
# recon functions
#

runBanner() {
  name=$1
  echo -e "${BLUE}\n[+] Running $name...${RESET}"
}

setup-dirs() {
  RESULTS_DIR="${PWD}/$(date '+%Y-%m-%d')"
  SUBDOMAINS_DIR="${RESULTS_DIR}/subdomains"
  WEB_DIR="${RESULTS_DIR}/web"
  SCREENSHOTS_DIR="${RESULTS_DIR}/screenshots"

  mkdir -p $SUBDOMAINS_DIR $WEB_DIR $SCREENSHOTS_DIR
}

# subdomains enumeration
function enum-subdomains() {
  local target=$1

  setup-dirs

  echo -e "${GREEN}[+] Enumerating subdomains of: ${target} ${RESET}"

  runBanner "assetfinder"
  echo $target | command assetfinder -subs-only > ${SUBDOMAINS_DIR}/assetfinder.txt

  runBanner "amass"
  command amass enum -silent -passive -d $target -o ${SUBDOMAINS_DIR}/amass.txt

  runBanner "subfinder"
  command subfinder -silent -d $target > ${SUBDOMAINS_DIR}/subfinder.txt

  echo -e "${BLUE}[+] removing duplicates${RESET}"

  cat ${SUBDOMAINS_DIR}/assetfinder.txt ${SUBDOMAINS_DIR}/amass.txt ${SUBDOMAINS_DIR}/subfinder.txt | grep $target | sort -u > ${SUBDOMAINS_DIR}/subdomains.txt
  echo -e "${BLUE}[+] found $(wc -l ${SUBDOMAINS_DIR}/subdomains.txt | awk '{print $1}') subdomains${RESET}"
}

function resolve-domains() {
  setup-dirs

  echo -e "${GREEN}\n[+] Resolving subdomains to IP addresses${RESET}"

  runBanner "dnsprobe"
  command dnsprobe -o ${SUBDOMAINS_DIR}/dns-results.txt -t 100 -silent

  cat ${SUBDOMAINS_DIR}/dns-results.txt | cut -d " " -f1 | sort -u  > ${SUBDOMAINS_DIR}/subdomains-resolved.txt
  echo -e "${BLUE}[+] resolved $(wc -l ${SUBDOMAINS_DIR}/subdomains-resolved.txt | awk '{print $1}') subdomains${RESET}"
}

function check-http() {
  setup-dirs

  echo -e "${GREEN}\n[+] Checking subdomains for HTTP(s) services${RESET}"
  runBanner "httpx"

  command httpx -follow-host-redirects \
    -status-code \
    -title \
    -content-type \
    -web-server \
    -ip \
    -silent \
    -ports 80,443,3000,5000,5672,7001,7002,7443,8000,8080,8081,8181,8282,8443,8880,8089,8888,9000,9090,9091,9200,9443,9999,10000 \
    -sr \
    -srd ${WEB_DIR}/httpx-output \
    -o ${WEB_DIR}/httpx.log

  cat ${WEB_DIR}/httpx.log | cut -d" " -f1 > ${WEB_DIR}/http-services.txt
  echo -e "${BLUE}[+] found $(wc -l ${WEB_DIR}/http-services.txt | awk '{print $1}') HTTP(s) services${RESET}"
}

function web-screenshots() {
  setup-dirs

  echo -e "${GREEN}\n[+] Taking screenshots of HTTP(s) services${RESET}"
  runBanner "aquatone"

  command aquatone \
    -ports xlarge \
    -threads 20 \
    -scan-timeout 300 \
    -http-timeout 10000 \
    -out ${SCREENSHOTS_DIR}
}

function nuclei-checks() {
  setup-dirs

  echo -e "${GREEN}\n[+] Taking screenshots of HTTP(s) services${RESET}"
  runBanner "nuclei"

  command nuclei \
    -pbar \
    -c 30 \
    -t ~/nuclei-templates/files \
    -t ~/nuclei-templates/default-credentials \
    -t ~/nuclei-templates/generic-detections \
    -t ~/nuclei-templates/panels \
    -t ~/nuclei-templates/security-misconfiguration \
    -t ~/nuclei-templates/technologies \
    -t ~/nuclei-templates/vulnerabilities \
    -t ~/nuclei-templates/fuzzing \
    -t ~/nuclei-templates/subdomain-takeover \
    -o ${WEB_DIR}/nuclei.log
}

function dir-bruteforce() {
  setup-dirs
  local WORDLIST_FILE="${HOME}/files/tools/wordlists/discovery.txt"

  echo -e "${GREEN}\n[+] Directory bruteforce on HTTP(s) services${RESET}"
  runBanner "meg"

  command meg -v \
    -d 3000 \
    -t 5000 \
    -s 200 -s 500 -s 401 \
    ${WORDLIST_FILE} ${WEB_DIR}/http-services.txt ${WEB_DIR}/meg-out > ${WEB_DIR}/meg.log

  echo -e "${BLUE}[+] meg found $(wc -l ${WEB_DIR}/meg.log | awk '{print $1}') items${RESET}"
}

function recon() {
  local target=$1

  setup-dirs

  enum-subdomains $target
  cat ${SUBDOMAINS_DIR}/subdomains.txt | resolve-domains
  cat ${SUBDOMAINS_DIR}/subdomains-resolved.txt | check-http
  cat ${WEB_DIR}/http-services.txt | web-screenshots
  cat ${WEB_DIR}/http-services.txt | nuclei-checks
  dir-bruteforce
}
